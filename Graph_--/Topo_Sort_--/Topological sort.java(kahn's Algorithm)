class Solution
{   
    public static void dfs(int node,ArrayList<ArrayList<Integer>> adj,int[] isVisited,Stack<Integer> st){
        isVisited[node]=1;
        
        for(Integer x:adj.get(node)){
            if(isVisited[x]==0){
                dfs(x,adj,isVisited,st);
            }
        }
        st.push(node);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        //using dfs.
        // int[] isVisited=new int[V];
        // Stack<Integer> st=new Stack<>();
        // for(int i=0;i<V;i++){
        //     if(isVisited[i]==0){
        //         dfs(i,adj,isVisited,st);
        //     }
        // }
        // int[] ans=new int[V];
        // int i=0;
        // while(!st.isEmpty()){
        //     ans[i++]=st.peek();
        //     st.pop();
        // }
        
        //using kahn's algorithm.
        //calculate the indegree of each node.
        int[] inDegree=new int[V];
        for(int i=0;i<V;i++){
            for(int x:adj.get(i)){
                inDegree[x]++;
            }
        }
        //put all the node with indegree equals to zero into the queue.
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(inDegree[i]==0){
                q.add(i);
            }
        }
        int[] ans=new int[V];
        int i=0;
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            
            ans[i++]=node;
            
            for(int x:adj.get(node)){
                inDegree[x]--;
                if(inDegree[x]==0){
                    q.add(x);
                }
            }
        }
        return ans;
    }
}
